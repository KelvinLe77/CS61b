Q: Is one sorting algorithm always faster than another?
A: CountingSorter is generally faster than all the other sorters. Sometimes, JavaSorter is quicker.

Q: Above we said that BubbleSort, WipingBubbleSort, and InsertionSort each had the same Theta(N^2) asymptotic time complexity. How can you explain the differences in the plots for these three algorithms?
A: They all take more time to sort larger arrays. They're not constant or linear. Might not be exactly the same but are somewhat similar to each other.

Q: What information can we gain from empirical analysis of algorithms which might not be as noticeable in asymptotical bounds?
A: No idea. If I had to guess, it would be minute details. Probably will be able to see edge cases better; when JavaSorter is quicker than CountingSorter.

Q: For any given sorting algorithm, does increasing the array size always mean the sorting takes longer?
A: No, the most notable example is JavaSorter; sometimes it spikes up and falls down.

Q: How does changing nrepeats change the plot?
A: It makes the lines more evened out. Probably, taking the mean of each point for every repeat or something like that.

Q: Is your plot the exact same as your partner's plot, even with the same values of ntrials, by, and nrepeats?
A: Do not have a partner but when I run it multiple times, the results differ slightly but are generally the same. 

Q: Optional: Look at the source code for BubbleSorter to WipingBubbleSorter. After looking at the plots, can you intuitively explain why WipingBubbleSorter is usually 2x as fast as BubbleSorter? (Hint: Consider the immobility of some elements when the swapping passes are single directional (i.e. only going forward), and how this "Wiping" strategy helps deal with that issue.) Can you come up with an example that shows the difference in runtime?
A: I believe it is because WipingBubbleSorter takes in account if array[j] > array[j + 1] as well as array[j] < array[j - 1]. Also, iterating from the end of the list also moves smaller value elements to the front of the list quicker.